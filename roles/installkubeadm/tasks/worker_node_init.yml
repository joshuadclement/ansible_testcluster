- name: Get list of joined worker nodes (1/2)
  when: "'control_plane' in group_names"
  ansible.builtin.shell: kubectl get nodes | tail -n +2 | awk '{print $1;}'
  changed_when: False
  register: print_nodes

- name: Get list of joined worker nodes (2/2)
  when: "'control_plane' in group_names"
  ansible.builtin.set_fact:
    nodes_that_are_joined: "{{ print_nodes.stdout_lines }}"

# Register nodes_that_should_be_joined in the scope of the control plane host.
# `hostvars` is a dict of `inventory_hostname`=>dict{all defined variables in its scope}.
# The name of the node in kubernetes is the hostname as saved on the machine's /etc/hosts,
# which is saved as an ansible fact in e.g.
# hostvars['workerX.sciencedata.dk']['ansible_hostname'].
# This chain of filters proceeds as follows:
#   hostvars: {inventory_hostname: {... ansible_hostname: 'its hostname from /etc/hosts'}}
#   dict2items(hostvars) <- [{key: inventory_hostname, value: {... ansible_hostname:...}}]
#   selectattr keeps only the entries in the list whose `key` exists in the
#     worker_nodes group (i.e. discards the hostvars of non-worker nodes)
#   map(attribute='value') applies the attr('value') filter on each element in the list,
#     resulting in [{... ansible_hostname: 'its hostname from /etc/hosts'}]
#   map(attribute='ansible_hostname') returns ['its hostname from /etc/hosts']
- name: Get list of nodes that should be joined
  when: "'control_plane' in group_names"
  ansible.builtin.set_fact:
    nodes_that_should_be_joined: "{{ hostvars | dict2items |
    selectattr('key', 'in', groups['worker_nodes']) |
    map(attribute='value') | map(attribute='ansible_hostname') }}"

- name: Get list of nodes that should be joined but are not yet
  when: "'control_plane' in group_names"
  ansible.builtin.set_fact:
    nodes_not_joined: "{{ nodes_that_should_be_joined |
    reject('in', nodes_that_are_joined) }}"

- name: Get tokens for nodes to join
  when: 
    - "'control_plane' in group_names"
    - nodes_not_joined | count > 0
  block:
    - name: Get tokens for nodes to join, create token (1/2)
      ansible.builtin.shell: kubeadm token create
      register: token_create

    - name: Get tokens for nodes to join, get ca-cert-hash (2/2)
      ansible.builtin.shell:
        cmd: >
          openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt |
          openssl rsa -pubin -outform der 2>/dev/null |
          openssl dgst -sha256 -hex | sed 's/^.* //'
      register: ca_cert_hash
      changed_when: False

- name: Join all missing nodes
  ansible.builtin.shell:
    cmd: |
      kubeadm join --token \
      {{ hostvars[groups['control_plane'][0]]['token_create']['stdout'] }} \
      {{ hostvars[groups['control_plane'][0]]['trusted_network_address'] }}:\
      {{ control_plane_apiserver_port }} \
      --discovery-token-ca-cert-hash sha256:\
      {{ hostvars[groups['control_plane'][0]]['ca_cert_hash']['stdout'] }} |\
      tee /var/log/kubeadm_join_output.txt
  when: ansible_hostname in hostvars[groups['control_plane'][0]]['nodes_not_joined']
