- name: Fail if docker_registry_admin_password not defined
  when:
    - docker_registry_admin_password == ""
    - "'control_plane' in group_names"
  ansible.builtin.debug:
    msg: "You need to define docker_registry_admin_password"
  failed_when: True

- name: Prepare secrets
  when:
    - "'control_plane' in group_names"
  block:
      # Check that the directory exists, and if not, mkdir && chmod
    - name: Prepare secrets, ensure directory exists
      ansible.builtin.file:
        path: /etc/kubernetes/custom_manifests/docker_registry
        state: directory
        owner: root
        group: root
        mode: 0751

    # The goal is to create an htpassword file that contains credentials for each of the users listed in the
    # docker_registry_auth variable. The base64 encoded content of this file will be used in the docker_registry.yaml
    # manifest to control authentication in the ingress.
    # Any username-password pair in this variable can be used to pass basic authentication in ingress.
    # This step uses the `htpasswd` command with each key-value (username-password) pair in the docker_registry_auth
    # variable, and outputs a file in /etc/kubernetes/custom_manifests/docker_registry/docker_htpasswd with the
    # usernames and hashed passwords
    - name: Prepare secrets, create htpasswd file
      loop: "{{ docker_registry_auth | dict2items }}"
      community.general.htpasswd:
        path: /etc/kubernetes/custom_manifests/docker_registry/docker_htpasswd
        mode: 0600
        owner: root
        group: root
        name: "{{ item.key }}"
        password: "{{ item.value }}"


      # Read it in and base64 encode it, and save the output as an ansible variable
      # cat /etc/kubernetes/custom_manifests/docker_registry/docker_htpasswd | base64
    - name: Prepare secrets, get copy of htpasswd
      ansible.builtin.slurp:
        src: /etc/kubernetes/custom_manifests/docker_registry/docker_htpasswd
      register: docker_registry_htpasswd

      # Set an ansible variable for the admin:password string.
      # This will be used to create secrets in the sciencedata and sciencedata-dev namespaces to allow
      # kubernetes to authenticate in order to pull images from the local registry.
    - name: Prepare secrets, set login string for docker login config file
      ansible.builtin.set_fact:
        docker_registry_docker_login_string: "admin:{{ docker_registry_admin_password }}"

    # This creates the credential storage json that a user will have when you run `docker login`
    # The base64 encoded content of this file needs to be available as a secret in the sciencedata
    # namespace, so that kubernetes can pass through the ingress authentication to pull the container images.
    - name: Prepare secrets, create docker login config file
      ansible.builtin.template:
        src: "{{ playbook_dir }}/install/templates/docker_login_config.json.j2"
        dest: /etc/kubernetes/custom_manifests/docker_registry/docker_login_config.json
        mode: 0600
        owner: root
        group: root

      # Save the base64 encoded contents of the file created in the previous step in an ansible variable
      # cat ... | base64
    - name: Prepare secrets, get copy of docker login config file
      ansible.builtin.slurp:
        src: /etc/kubernetes/custom_manifests/docker_registry/docker_login_config.json
      register: docker_registry_login_config

- name: Create local docker registry
  when:
    - "'control_plane' in group_names"
  block:

    - name: Create local docker registry, copy manifest (1/2)
      ansible.builtin.template:
        src: "{{ playbook_dir }}/install/templates/docker_registry.yaml.j2"
        dest: /etc/kubernetes/custom_manifests/docker_registry.yaml
        owner: root
        group: root
        mode: 0640

      # kubectl apply -f
    - name: Create local docker registry, apply manifest (2/2)
      kubernetes.core.k8s:
        kubeconfig: "{{ k8s_admin_config }}"
        apply: True
        src: /etc/kubernetes/custom_manifests/docker_registry.yaml
        wait: True
