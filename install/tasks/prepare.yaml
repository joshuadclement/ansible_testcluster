  ### If swap is on, then turn it off and comment out its entry in /etc/fstab
- name: Check if swap enabled
  tags:
    - swap
    - sysprepare
  ansible.builtin.shell: |
    [[ $(swapon --show) ]] && swapoff -a && sed -i 's/^\([^#].*?\sswap\s+sw\s+.*\)$/# \1/'
  args:
    executable: /bin/bash
  failed_when: False

- name: Install/update system packages
  tags:
    - sysupdate
    - sysprepare
  block:
    # apt install python3-pip ...
  - name: Make sure packages are installed
    ansible.builtin.apt:
      update_cache: True
      name:
        - python3-pip
        - zsh
        - net-tools
        - iptables-persistent
        - jq
        - nfs-common
      state: present

    # snap install yq ...
    ### yq is only distributed through snap in ubuntu, don't ask me why
  - name: Make sure necessary snap packages are installed
    community.general.snap:
      name:
        - yq
      state: present
  
    # apt update && apt dist-upgrade
  - name: Update
    ansible.builtin.apt:
      update_cache: True
      upgrade: True

  - name: Check restart needed
    ansible.builtin.shell: /usr/lib/update-notifier/update-motd-reboot-required
    changed_when: False
    register: reboot_required

    # Like [[ $(/.../update-motd-reboot-required) ]] && ..
    # except that this will put the notification to update in the stdout where someone is running the ansible playbook.
  - name: Notify restart needed
    ansible.builtin.debug:
      msg: "{{ reboot_required.stdout }}"
    when: reboot_required.stdout_lines | count > 0

  # Not necessary, but I like having easy search through previously typed commands in the shell.
  # Remove this block if you don't want it, or add "--skip-tags=zsh" when running it.
- name: Setup shell
  tags:
    - zsh
    - sysprepare
  block:
    # scp zshrc host:/home/user/.zshrc && scp zshrc host:/root/.zshrc && set owner & permissions correctly
  - name: Copy zshrc for a nice command line experience
    loop:
      - username: "user"
        homepath: "/home/user"
      - username: "root"
        homepath: "/root"
    ansible.builtin.copy:
      src: "{{ playbook_dir }}/install/files/zshrc"
      dest: "{{ item.homepath }}/.zshrc"
      owner: "{{ item.username }}"
      group: "{{ item.username }}"
      mode: 0644
  
    # usermod
  - name: Set user shell
    loop:
      - "user"
      - "root"
    ansible.builtin.user:
      shell: /bin/zsh
      name: "{{ item }}"

- name: Install python dependencies for ansible modules
  tags:
    - python
    - sysprepare
  block:
      # pip install kubernetes
    - name: Install kubernetes module
      pip:
        name: kubernetes

      # pip install passlib
      # dependency of the community.general.htpasswd ansible module
      # necessary for generating the docker-registry htpasswd
    - name: Install passlib module
      pip:
        name: passlib

- name: Configure netplan
  tags:
    - sysprepare
    - netplan
  block:
    - name: Configure netplan, copy template (1/2)
      ansible.builtin.template:
        src: "{{ playbook_dir }}/install/templates/01-netcfg.yaml.j2"
        dest: "/etc/netplan/01-netcfg.yaml"
        owner: root
        group: root
        mode: 0644

    - name: Configure netplan, apply the configuration (2/2)
      ansible.builtin.shell: netplan apply


- name: Set firewall rules
  tags:
    - firewall
    - sysprepare
  block:
    - name: Set firewall rules, copy persistent files (1/2)
      ansible.builtin.template:
        src: "{{ playbook_dir }}/install/templates/rules.v4.j2"
        dest: "/etc/iptables/rules.v4"
        owner: root
        group: root
        mode: 0644
      register: copied_firewall_rules

    - name: Set firewall rules, flush and reload rules (2/2)
      when: copied_firewall_rules.changed
      ansible.builtin.shell: iptables -F && iptables -t nat -F && iptables -t mangle -F && iptables -X && iptables-restore < /etc/iptables/rules.v4
