- name: Check if control plane is initialized
  when: "'control_plane' in group_names"
  ansible.builtin.shell: kubectl get nodes
  failed_when: False
  changed_when: False
  register: kubectl_result

- name: Check if control_plane port {{ apiserver_port }} is occupied
  when: "'control_plane' in group_names"
  ansible.builtin.shell: netstat -tlpn | grep ":{{ apiserver_port }}"
  failed_when: False
  changed_when: False
  register: port_result

  # if kubectl exits with an error code, or if the apiserver port is not in use on the control plane
- name: Initialize control plane
  when:
    - "'control_plane' in group_names"
    - kubectl_result.rc != 0
    - port_result.stdout_lines | count == 0
  block:
      # systemctl enable kubelet && systemctl restart kubelet
    - name: Initialize control plane, start kubelet (1/5)
      ansible.builtin.systemd:
        name: kubelet
        state: restarted
        enabled: True
        daemon_reload: True

    - name: Initialize control plane, copy kubeadm config (2/5)
      ansible.builtin.template:
        src: "{{ playbook_dir }}/install/templates/kubeadm-config.yaml.j2"
        dest: /etc/kubernetes/kubeadm-config.yaml
        owner: root
        group: root
        mode: 0644

    - name: Initialize control plane, initialize kubeadm (3/5)
      ansible.builtin.shell: kubeadm init --config /etc/kubernetes/kubeadm-config.yaml 2>&1 > /var/log/kubeadm_init_output.txt

      # mkdir /home/user/.kube && mkdir /root/.kube && set ownership and permissions
    - name: Initialize control plane, make config dirs (4/5)
      loop:
        - username: "user"
          homepath: "/home/user"
        - username: "root"
          homepath: "/root"
      ansible.builtin.file:
        path: "{{ item.homepath }}/.kube"
        owner: "{{ item.username }}"
        group: "{{ item.username }}"
        state: directory

      # cp /etc/kubernetes/admin.conf /home/user/.kube/config && chmod 600 ... and same for root
    - name: Initialize control plane, copy kubectl config (5/5)
      loop:
        - username: "user"
          homepath: "/home/user"
        - username: "root"
          homepath: "/root"
      ansible.builtin.copy:
        dest: "{{ item.homepath }}/.kube/config"
        src: /etc/kubernetes/admin.conf
        remote_src: True
        owner: "{{ item.username }}"
        group: "{{ item.username }}"
        mode: 0600

- name: Check helm version
  when:
    - "'control_plane' in group_names"
  ansible.builtin.shell: helm version | sed 's/.*Version:"v\([0-9]\+[.][0-9]\+[.][0-9]\+\)".*/\1/'
  failed_when: False
  changed_when: False
  register: helm_installed_version

  # if helm isn't installed or isn't the right version
- name: Install helm
  when:
    - "'control_plane' in group_names"
    - helm_installed_version.stdout != helm_version
  block:
      # curl url -o /tmp/helm.tar.gz && check checksum
    - name: Install helm, fetch (1/2)
      ansible.builtin.get_url:
        url: "{{ helm_binary_url }}"
        checksum: "{{ helm_binary_checksum }}"
        dest: /tmp/helm.tar.gz

    - name: Install helm, extract and create directory for customization values (2/2)
      ansible.builtin.shell: |
        tar -xzf /tmp/helm.tar.gz -C /tmp
        mv /tmp/linux-amd64/helm /usr/local/bin/helm
        chmod 0751 /usr/local/bin/helm
        rm -rf /tmp/helm.tar.gz /tmp/linux-amd64

  # mkdir and chmod
- name: Ensure directory exists for custom manifests
  when:
    - "'control_plane' in group_names"
  ansible.builtin.file:
    path: /etc/kubernetes/custom_manifests
    state: directory
    mode: 0751

  # mkdir and chmod
- name: Ensure directory exists for helm customization values
  when:
    - "'control_plane' in group_names"
  ansible.builtin.file:
    path: /etc/kubernetes/helm_values
    state: directory
    mode: 0751
